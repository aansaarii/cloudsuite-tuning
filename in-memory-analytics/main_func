#!/bin/bash 

function start_master(){
    (($DEV)) && echo "start master"
    clean_containers $MASTER_CONTAINER
    docker run -dP --net ${NET} --hostname ${MASTER_CONTAINER} --name ${MASTER_CONTAINER} --cpuset-cpus=${MASTER_CPUS} ${SPARK} master
    echo "cmd master: docker run -dP --net ${NET} --hostname ${MASTER_CONTAINER} --name ${MASTER_CONTAINER} --cpuset-cpus=${MASTER_CPUS} ${SPARK} master"
    MASTER_PID=$(docker inspect -f '{{.State.Pid}}' ${MASTER_CONTAINER})
}

function start_workers(){
    (($DEV)) && echo "start workers"
    clean_containers $WORKER_CONTAINER
    docker run -dP --net ${NET} --volumes-from ${DATASET_CONTAINER} --name ${WORKER_CONTAINER} --cpuset-cpus=${WORKER_CPUS} ${SPARK} worker spark://${MASTER_CONTAINER}:7077
    echo "cmd worker: docker run -dP --net ${NET} --volumes-from ${DATASET_CONTAINER} --name ${WORKER_CONTAINER} --cpuset-cpus=${WORKER_CPUS} ${SPARK} worker spark://${MASTER_CONTAINER}:7077"
}

function start_client(){
    case "$1" in 
    small) DATA_SIZE=ml-latest-small
        ;;
    large) DATA_SIZE=ml-latest 
        ;;
    *) printf "Unrecognized option for data size:\n \
            small, large"
        exit 1
    esac
    clean_containers $CLIENT_CONTAINER
   
    # echo "$NET,$CLIENT_CPUS,$DRIVER_MEM,$DATASET_CONTAINER,$EXECUTOR_MEM,$TOTAL_EXECUTOR_CNT" 
    docker run -d --net ${NET} --name ${CLIENT_CONTAINER} --cpuset-cpus=${CLIENT_CPUS} --volumes-from ${DATASET_CONTAINER} ${CLIENT_IMAGE} /data/${DATA_SIZE} /data/myratings.csv --driver-memory $DRIVER_MEM --executor-memory $EXECUTOR_MEM --master spark://${MASTER_CONTAINER}:7077 
    echo "cmd client: docker run -d --net ${NET} --name ${CLIENT_CONTAINER} --cpuset-cpus=${CLIENT_CPUS} --volumes-from ${DATASET_CONTAINER} ${CLIENT_IMAGE} /data/${DATA_SIZE} /data/myratings.csv --driver-memory $DRIVER_MEM --executor-memory $EXECUTOR_MEM --executor-cores=$TOTAL_EXECUTOR_CNT --master spark://${MASTER_CONTAINER}:7077"
}

function detect_stage () {
    case "$1" in
    master-ready)
        KEYWORDS="I have been elected leader"
        log_helper_stderr ${MASTER_CONTAINER} "${KEYWORDS}" 
        ;;
    workers-ready) 
        KEYWORDS="Successfully registered with master"
        log_helper_stderr ${WORKER_CONTAINER} "${KEYWORDS}" 
        ;;
    executor-ready)
        KEYWORDS="ExecutorRunner: Launch command"
        log_helper_stderr ${WORKER_CONTAINER} "${KEYWORDS}"
        ;;
    warmup) 
        # Got 100004 ratings from 671 users on 9066 movies.
        KEYWORDS="ratings from"
        log_helper_stdout ${CLIENT_CONTAINER} "${KEYWORDS}"
        ;;
    executor-killed)
        KEYWORDS="ExecutorRunner: Killing process"
        log_helper_stderr ${WORKER_CONTAINER} "${KEYWORDS}" 2
        ;; 
    finished) 
        KEYWORDS="Benchmark execution time"
        log_helper_stdout ${CLIENT_CONTAINER} "${KEYWORDS}" 2 
        ;;
    *) 
        printf "Unrecognized option for stage $1:\n \
            master-ready, workers-ready, executor-ready, warmup, finished"
        exit 1 
    esac
}

function log_client(){
    docker logs $CLIENT_CONTAINER >> $CLIENT_LOG
    docker logs $CLIENT_CONTAINER 2>> $CLIENT_LOG2
    docker logs $WORKER_CONTAINER 2>> $WORKER_LOG
}

function client_summary(){
    grep "Benchmark execution time" $CLIENT_LOG >> $CLIENT_SUMMARY 
    cat $PERF_LOG | awk '{printf "%15s\n",$1}' >> $CLIENT_SUMMARY
}
